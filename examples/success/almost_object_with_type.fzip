import {
  type unit :: ⋆
  val  unit :  unit

  type Bool :: < type t :: ⋆ >
  val  Bool :
    { val true : Bool.t
      val false : Bool.t
      val match : ∀(a :: ⋆), Bool.t →
                    { val true : unit → a   val false : unit → a } → a
    }
}

export { type t :: ⋆ }

let rec o : { val value : Bool.t
              val get_value : unit → Bool.t
              val encoded : Bool.t } =
    { val value = o.value
      val get_value (x:unit) = o.value
      val encoded = o.value }
in
Σ [t] (t :: ⋆ = Bool.t)
  (o : { val value : Bool.t
         val get_value : unit → Bool.t
         val encoded : Bool.t
       }
  )
