(* encoding of natural numbers *)

import {
  type unit :: ⋆
  val unit : unit

  type nat_sig ::
  S (λ(α::⋆) ⇒ { val Zero : α
                  val Succ : α → α
                  val match : ∀(β::⋆), α →
                      { val Zero : unit → β
                        val Succ : α → β    } → β
                 }
    :: ⋆ ⇒ ⋆)
}

export {
  type Nat :: < type t as t :: ⋆
                type Sig :: S(nat_sig t) >
}

let type nat_constr (α::⋆) :: ⋆ = { val Zero : α val Succ : α → α } in
let type nat :: ⋆ = ∀(α::⋆), nat_constr α → α in

Σ [Nat] (Nat
          :: < type t as t :: ⋆ type Sig :: S(nat_sig t) >
          = < type t = nat type Sig = nat_sig nat >)
(let mkZero (α :: ⋆) (r : nat_constr α) = r.Zero in
let mkSucc (n : nat) (α :: ⋆) (r : nat_constr α) = r.Succ (n [α] r) in
{ val Zero = mkZero
  val Succ = mkSucc
  val match (β :: ⋆) (n : nat)
             (destruct : { val Zero : unit → β val Succ : nat → β }) =
             let y = n [{ val int: nat val res: β }]
             { val Zero = { val int = mkZero val res = destruct.Zero unit }
               val Succ (x : { val int: nat val res: β }) = 
                  { val int = mkSucc x.int val res = destruct.Succ x.int }  } in
             y.res
} : nat_sig Nat.t)
