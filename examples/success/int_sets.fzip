import {
  type unit :: ⋆
  val  unit :  unit

  type Bool :: < type t :: ⋆ >
  val  Bool :
    { val true : Bool.t
      val false : Bool.t
      val match : ∀(a :: ⋆), Bool.t →
                    { val true : unit → a   val false : unit → a } → a
    }

  type Int :: < type t :: ⋆ >
  val  Int :
    { val zero : Int.t
      val succ : Int.t → Int.t
      val match : ∀(a :: ⋆), Int.t →
                    { val zero : unit → a   val succ : Int.t → a } → a
      val compare : Int.t → Int.t → Bool.t
    }

}

import {
  type Set :: < type t as set :: < type t :: ⋆> ⇒ ⋆
                type Ordered ::
                     S(λ(α :: < type t :: ⋆ >) ⇒
                       { val compare : α.t → α.t → Bool.t }
                      :: < type t :: ⋆ > ⇒ ⋆)
                type Sig ::
                     S(λ(α :: < type t :: ⋆ >) ⇒
                       { val empty : set α
                         val singleton : α.t → set α
                         val add : α.t → set α → set α
                       }
                       :: < type t :: ⋆ > ⇒ ⋆ )
              >
  val Set : { val Make : ∀(α :: < type t :: ⋆ >), Set.Ordered α → Set.Sig α }
}

{ val IntSet = Set.Make [Int] Int
}