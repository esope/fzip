(* encoding of lists *)

import {
  type unit :: ⋆
  val unit : unit

  type list_sig ::
  S (λ (elt :: ⋆) (list :: ⋆ ⇒ ⋆) ⇒
    { val Nil : list elt
      val Cons : elt → list elt → list elt
      val match : ∀(β::⋆), list elt →
                  { val Nil : unit → β
                    val Cons : elt → list elt → β } → β
    }
    :: ⋆ ⇒ (⋆ ⇒ ⋆) ⇒ ⋆)
}

export {
  type List :: < type t as t :: ⋆ ⇒ ⋆
                type Sig :: S(λ(elt::⋆) ⇒ list_sig elt t :: ⋆ ⇒ ⋆) >
}

let type list_constr (elt::⋆) (list_elt::⋆) :: ⋆ =
    { val Nil : list_elt val Cons : elt → list_elt → list_elt } in
let type list (elt :: ⋆) :: ⋆ = ∀(α::⋆), list_constr elt α → α in

Σ [List] (List
          :: < type t as t :: ⋆ ⇒ ⋆
               type Sig :: S(λ(elt::⋆) ⇒ list_sig elt t :: ⋆ ⇒ ⋆) >
          = < type t = list
              type Sig = λ(elt::⋆) ⇒ list_sig elt list >)

λ(elt :: ⋆) →
(let Nil (α :: ⋆) (r : list_constr elt α) = r.Nil in
{ val Nil = Nil
   val Cons (x : elt) (l : list elt) (α :: ⋆) (r : list_constr elt α) =
        r.Cons x (l [α] r)
   val match (β :: ⋆) (l : list elt)
             (destruct :
               { val Nil : unit → β val Cons : elt → list elt → β }) =
             let y =
             l [{ val list : list elt val res : β }]
             { val Nil = { val list = Nil val res = destruct.Nil unit }
               val Cons (x : elt) (r : { val list : list elt val res : β }) =
                 { val list = r.list val res = destruct.Cons x r.list } } in
             y.res
} : list_sig elt List.t)