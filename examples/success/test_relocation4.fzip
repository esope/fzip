import {
  type F :: S ( λ(a::⋆) => { val L : a val R : a } :: ⋆ => ⋆)
  val x : ∃ (a::⋆), F a
}
export {
  type b :: < type t :: ⋆ >
}

ν (a :: ⋆)
  let y = open [a] x in
  Σ [b] (b :: < type t :: ⋆ > = < type t = a > )
    (y : F b.t)

(* needs weakening *)
